#version 440 core
layout(binding = 0) uniform sampler2D albedo;
layout(binding = 1) uniform sampler2D pos;
layout(binding = 2) uniform sampler2D norm;
layout(binding = 3) uniform sampler2D uv;

// material input
layout(binding = 11) uniform sampler2D difColor;

in vec2 v_iuv;
layout (location = 0) out vec4 color;

layout (std140, binding = 0) uniform Model {
	mat4 transform;
} u_Model;

layout (std140, binding = 8) uniform Camara {
	mat4 view;
	mat4 projection;
} u_Camara;

layout (std140, binding = 1) uniform PointLight {
	vec4 positionAndIntensity;
} u_PointLight;

//layout (std140, binding = 9) uniform MaterialParam {
//	vec4 param;
//} u_MaterialParam;

void main() { 
	vec3 position = texture(pos, v_iuv).xyz;
	//vec3 pointLightPos = (u_PointLight.positionAndIntensity).xyz;
	//vec3 pointLightPos = (u_Camara.view *vec4((u_PointLight.positionAndIntensity).xyz, 0.)).xyz; 
	//vec3 L = pointLightPos - position;


	vec3 pointLightPos = (   vec4(vec3(0.,2.0, -10.00), 1.)).xyz;   ;
	vec4 worldPosition =   inverse( u_Camara.projection * u_Camara.view) * vec4(texture(pos, v_iuv).xyz, 1.);
	vec4 worldNormal =   inverse(u_Camara.view) * vec4(texture(norm, v_iuv).xyz, 1.);
	//worldPosition /= worldPosition.w;
	vec3 L = pointLightPos - worldPosition.xyz;
	vec3 N =  texture(norm, v_iuv).xyz;
	
	//color = texture(difColor, texture(uv, v_iuv).xy) *0.9 +  texture(uv, v_iuv) * 0.1;


	//color = texture(albedo, texture(uv, v_iuv).xy) *0.9 +  texture(uv, v_iuv) * 0.1;

	color = texture(albedo, v_iuv);

	//color = texture(pos, v_iuv);

	//color = u_MaterialParam.param * length(texture(difColor, v_iuv)) * clamp(dot( normalize(N), normalize(L)), 0.01,1.);

	//color = vec4(vec3(texture(pos, v_iuv).z / 5), 1.);
	//color = texture(norm, v_iuv) ;
	//color = texture(difColor, v_iuv) * clamp(dot( normalize(-texture(norm, v_iuv).xyz), normalize(-L)), 0.01,1.);
	//color = u_MaterialParam.param * 0.2 + texture(difColor, v_iuv) * 0.1;
	//color = u_MaterialParam.param * length(texture(difColor, v_iuv)) * clamp(dot( normalize(-texture(norm, v_iuv).xyz), normalize(-L)), 0.01,1.);

	//vec3 L = pointLightPos - position;
	//color = texture(norm, v_iuv);
	//color = texture(difColor, v_iuv) * dot(normalize(texture(norm, v_iuv)).xyz,normalize(-L));
	//color = vec4(normalize(-L) * 0.5 + 0.5, 1);
	//color = texture(difColor, v_iuv) * dot(normalize(texture(norm, v_iuv).xyz), normalize(L));
	//color = vec4(1., 0., 0., 1.);



	color = texture(albedo, v_iuv) * clamp(dot( normalize(-texture(norm, v_iuv).xyz), normalize(-L)), 0.01,1.);



	//color = texture(albedo, v_iuv) * clamp(dot( normalize(-texture(norm, v_iuv).xyz), normalize(-L)), 0.01,1.);
}